# this can be any application server, not just Unicorn/Rainbows!
upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  # server unix:/tmp/.sock fail_timeout=0;

  # for TCP setups, point these to your backend servers
  #server 0.0.0.0:8080 fail_timeout=0;
  server 127.0.0.1:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;

}


server {
  # enable one of the following if you're on Linux or FreeBSD
  # listen 80 default deferred; # for Linux
  # listen 80 default accept_filter=httpready; # for FreeBSD

  # If you have IPv6, you'll likely want to have two separate listeners.
  # One on IPv4 only (the default), and another on IPv6 only instead
  # of a single dual-stack listener.  A dual-stack listener will make
  # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
  # instead of just "10.0.0.1") and potentially trigger bugs in
  # some software.
  # listen [::]:80 ipv6only=on; # deferred or accept_filter recommended

  listen 80;
  listen 443 ssl;
  ssl_certificate   /etc/ssl/certs/myssl.crt;
  ssl_certificate_key  /etc/ssl/private/myssl.key;

  #Configuration for Perfect Forward Secrecy
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

  client_max_body_size 4G;
#  server_name *.diveboard.com *.scu.bz scu.bz;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 5;

  # path for static files
  root /home/diveboard/diveboard-web/current/public;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time.  Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;

  rewrite ^/blog/(.*)$ /community/$1 permanent;
  rewrite ^/blog$ /community permanent;

  location ~* ^\/(galleria|img|images|styles|favicon).*\.(png|gif|jpg|JPG|jpeg|svg|css|js|swf|ico|eot|ttf|woff)(\?[0-9]+)?$ {
    access_log off;
    expires max;
    add_header Cache-Control public;
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, OPTIONS";
    add_header Access-Control-Allow-Headers "X-CSRF-Token";
    add_header Access-Control-Allow-Credentials "true";
    if ($request_method = OPTIONS ) {
      add_header Cache-Control public;
      add_header Access-Control-Allow-Origin "*";
      add_header Access-Control-Allow-Methods "GET, OPTIONS";
      add_header Access-Control-Allow-Headers "X-CSRF-Token";
      add_header Access-Control-Allow-Credentials "true";
      add_header Content-Length 0;
      add_header Content-Type text/plain;
      return 200;
    }

  }
#used for FB Connect on AGENT
  location ~* ^/connect {
    access_log   off;
    expires 0;
    break;
  }

  location ~* ^/assets/ppl/ {
    expires max;
    add_header Cache-Control public;
    add_header Access-Control-Allow-Origin "*";
  }

  location ~* ^\/(assets|js|map_images|user_images).*\.(png|gif|jpg|JPG|jpeg|css|js|swf|ico|eot|ttf|woff)(\?[0-9]+)?$ {
    access_log off;
    expires 600h;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    location ~* ^/assets/(?<subpath>.*) {
      add_header Access-Control-Allow-Origin "*";
      try_files $uri /assets/ppl/$subpath @app;
    }
    add_header Access-Control-Allow-Origin "*";
  }

  location ~* ^\/assets\/explore\/.*?$ {
    expires 1h;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    if ($http_origin ~* .diveboard.com$) {
      set $flag_option  A;
    }
    if ($request_method = OPTIONS ) {
      set $flag_option "${flag_option}B";
    }
    if ($flag_option = "A") {
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "X-CSRF-Token";
            add_header Access-Control-Allow-Credentials "true";
    }
    if ($flag_option = "AB") {
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "X-CSRF-Token";
            add_header Access-Control-Allow-Credentials "true";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
    }
    if ($flag_option = "B") {
            add_header Access-Control-Allow-Origin "http://$host";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "X-CSRF-Token";
            add_header Access-Control-Allow-Credentials "true";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
    }
    error_page 404 = @empty_json;
  }

  #This is for stats : we only want to trace things in access.log
  location ~* ^/api/stats_trace/.*$ {
    add_header Content-Length 0;
    add_header Content-Type text/plain;
    return 200;
  }


  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    #This is a custom header so that it doesn't mess with rails internals
    proxy_set_header X-Forwarded-Scheme "$scheme://";

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;

    proxy_pass http://app_server;
  }

  #Renders almost empty JSON for missing assets explore
  location @empty_json {
    if ($http_origin ~* .diveboard.com$) {
      add_header Vary Origin;
      add_header Access-Control-Allow-Origin "$http_origin";
      add_header Access-Control-Allow-Methods "GET, OPTIONS";
      add_header Access-Control-Allow-Headers "X-CSRF-Token, Vary";
      add_header Access-Control-Allow-Credentials "true";
    }
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    return 200 "{}";
  }

  # Rails error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /home/diveboard/diveboard-web/current/public;
  }

  # Enable maintenance.html page with 503 error.  This is used with advanced capistrano configuration.
  set $maintenance 0;
  if (-f $document_root/system/maintenance/index.html) {
    set $maintenance 1;
  }
  if ($request_uri ~* (jpg|jpeg|gif|png|js|css)$) {
    set $maintenance 0;
  }
  if ($request_uri = /heartheat) {
    set $maintenance 0;
  }
  if ($maintenance) {
    rewrite ^(.*)$ /system/maintenance/index.html break;
    return 503;
  }

  error_page 503 @maintenance;
  location @maintenance {
    rewrite ^(.*)$ /system/maintenance/index.html break;
  }
}
